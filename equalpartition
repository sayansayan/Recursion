/*416. Partition Equal Subset Sum
Medium


Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100 */

#include<iostream>
#include<vector>

using namespace std;

bool equalPartition(vector<int>&nums,int sum,int n) {
        if(n == 0 )
            return false;
        if(sum==0)
            return true;
        if(nums[n-1] <= sum) {
             return (equalPartition(nums,sum-nums[n-1],n-1))   ||   equalPartition(nums,sum,n-1) ;
        }
        else 
            return equalPartition(nums,sum,n-1);

    }
    
bool canPartition(vector<int>& nums) {
        
        int sum=0;
        for(int i = 0; i < nums.size() ;i++) {
            sum = sum + nums[i];
        }
       return equalPartition(nums,sum/2,nums.size());
    }

int main()
{
  //  vector<int> nums{1,5,11,5,6,6};
   vector<int> nums{1,2};
    cout<<canPartition(nums) ;
    return 0;
}
